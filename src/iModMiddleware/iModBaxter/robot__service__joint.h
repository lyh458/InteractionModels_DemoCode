//This file is automatically generated. DO NOT EDIT!

#include <RobotRaconteur.h>
#include <boost/signals2.hpp>
#pragma once

namespace robot
{
namespace service
{
namespace joint
{

class Baxter;

class Baxter : public virtual RobotRaconteur::RRObject
{
public:
virtual RR_SHARED_PTR<RobotRaconteur::RRArray<double > > get_joint_positions()=0;
virtual void set_joint_positions(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value)=0;

virtual RR_SHARED_PTR<RobotRaconteur::RRArray<double > > get_joint_velocities()=0;
virtual void set_joint_velocities(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value)=0;

virtual RR_SHARED_PTR<RobotRaconteur::RRArray<double > > get_joint_torques()=0;
virtual void set_joint_torques(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value)=0;

virtual RR_SHARED_PTR<RobotRaconteur::RRArray<double > > get_endeffector_positions()=0;
virtual void set_endeffector_positions(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value)=0;

virtual RR_SHARED_PTR<RobotRaconteur::RRArray<double > > get_endeffector_orientations()=0;
virtual void set_endeffector_orientations(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value)=0;

virtual RR_SHARED_PTR<RobotRaconteur::RRArray<double > > get_endeffector_twists()=0;
virtual void set_endeffector_twists(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value)=0;

virtual RR_SHARED_PTR<RobotRaconteur::RRArray<double > > get_endeffector_wrenches()=0;
virtual void set_endeffector_wrenches(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value)=0;

virtual void setControlMode(uint8_t mode)=0;

virtual void setJointCommand(std::string limb, RR_SHARED_PTR<RobotRaconteur::RRArray<double > > command)=0;

virtual void setPositionModeSpeed(double speed)=0;

virtual std::string RRType() {return "robot.service.joint.Baxter";  }
};

}
}
}

