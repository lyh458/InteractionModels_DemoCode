//This file is automatically generated. DO NOT EDIT!

#include <RobotRaconteur.h>
#include <boost/signals2.hpp>
#pragma once

namespace robot
{
namespace service
{
namespace peripheral
{

class NavigatorState;
class SonarPointCloud;
class BaxterPeripherals;

class NavigatorState : public RobotRaconteur::RRStructure {
public:
uint8_t ok_button;
uint8_t cancel_button;
uint8_t show_button;
uint8_t scroll_wheel;
uint8_t inner_led;
uint8_t outer_led;

virtual std::string RRType() {return "robot.service.peripheral.NavigatorState";  }
};

class SonarPointCloud : public RobotRaconteur::RRStructure {
public:
RR_SHARED_PTR<RobotRaconteur::RRArray<float > > sensors;
RR_SHARED_PTR<RobotRaconteur::RRArray<float > > distances;
RR_SHARED_PTR<RobotRaconteur::RRArray<float > > points;

virtual std::string RRType() {return "robot.service.peripheral.SonarPointCloud";  }
};

class BaxterPeripherals : public virtual RobotRaconteur::RRObject
{
public:
virtual RR_SHARED_PTR<SonarPointCloud > get_sonar_pointcloud()=0;
virtual void set_sonar_pointcloud(RR_SHARED_PTR<SonarPointCloud > value)=0;

virtual RR_SHARED_PTR<RobotRaconteur::RRArray<double > > get_gravity_compensation_torques()=0;
virtual void set_gravity_compensation_torques(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value)=0;

virtual void openGripper(std::string gripper)=0;

virtual void closeGripper(std::string gripper)=0;

virtual void calibrateGripper(std::string gripper)=0;

virtual void setGripperPosition(std::string gripper, double position)=0;

virtual void setGripperVelocity(std::string gripper, double velocity)=0;

virtual void setGripperHoldForce(std::string gripper, double force)=0;

virtual void setGripperMoveForce(std::string gripper, double force)=0;

virtual void setGripperDeadband(std::string gripper, double deadband)=0;

virtual float getGripperPosition(std::string gripper)=0;

virtual float getGripperForce(std::string gripper)=0;

virtual float getRangerValue(std::string arm)=0;

virtual float getAccelerometerValue(std::string arm)=0;

virtual void panHead(double angle)=0;

virtual float getHeadPanAngle()=0;

virtual void nodHead()=0;

virtual void enableSonar()=0;

virtual void disableSonar()=0;

virtual void suppressBodyAvoidance(std::string limb, uint8_t suppress)=0;

virtual void suppressCollisionAvoidance(std::string limb, uint8_t suppress)=0;

virtual void suppressContactSafety(std::string limb, uint8_t suppress)=0;

virtual void suppressCuffInteraction(std::string limb, uint8_t suppress)=0;

virtual void suppressGravityCompensation(std::string limb, uint8_t suppress)=0;

virtual RR_SHARED_PTR<NavigatorState > getNavigatorState(std::string navigator)=0;

virtual void setNavigatorLEDs(std::string navigator, uint8_t inner_led, uint8_t outer_led)=0;

virtual std::string RRType() {return "robot.service.peripheral.BaxterPeripherals";  }
};

}
}
}

