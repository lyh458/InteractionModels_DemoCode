//This file is automatically generated. DO NOT EDIT!

#ifndef ROBOTRACONTEUR_USE_STDAFX
#include "robot__service__peripheral_stubskel.h"
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
#else
#include "stdafx.h"
#endif
namespace robot
{
namespace service
{
namespace peripheral
{
std::string robot__service__peripheralFactory::GetServiceName()
{
return "robot.service.peripheral";
}
std::string robot__service__peripheralFactory::DefString()
{
std::string out(
"#Service to provide sample interface to the iRobot Create\n"
"service robot.service.peripheral\n"
"\n"
"option version 0.5\n"
"\n"
"struct NavigatorState\n"
"field uint8 ok_button\n"
"field uint8 cancel_button\n"
"field uint8 show_button\n"
"field uint8 scroll_wheel\n"
"field uint8 inner_led\n"
"field uint8 outer_led\n"
"end struct\n"
"\n"
"struct SonarPointCloud\n"
"field single[] sensors\n"
"field single[] distances\n"
"field single[] points\n"
"end struct\n"
"\n"
"object BaxterPeripherals\n"
"\n"
"function void openGripper(string gripper)\n"
"function void closeGripper(string gripper)\n"
"function void calibrateGripper(string gripper)\n"
"function void setGripperPosition(string gripper, double position)\n"
"function void setGripperVelocity(string gripper, double velocity)\n"
"function void setGripperHoldForce(string gripper, double force)\n"
"function void setGripperMoveForce(string gripper, double force)\n"
"function void setGripperDeadband(string gripper, double deadband)\n"
"function single getGripperPosition(string gripper)\n"
"function single getGripperForce(string gripper)\n"
"\n"
"function single getRangerValue(string arm)\n"
"\n"
"function single getAccelerometerValue(string arm)\n"
"\n"
"function void panHead(double angle)\n"
"function single getHeadPanAngle()\n"
"function void nodHead()\n"
"\n"
"function void enableSonar()\n"
"function void disableSonar()\n"
"property SonarPointCloud sonar_pointcloud\n"
"\n"
"function void suppressBodyAvoidance(string limb, uint8 suppress)\n"
"function void suppressCollisionAvoidance(string limb, uint8 suppress)\n"
"function void suppressContactSafety(string limb, uint8 suppress)\n"
"function void suppressCuffInteraction(string limb, uint8 suppress)\n"
"function void suppressGravityCompensation(string limb, uint8 suppress)\n"
"\n"
"property double[] gravity_compensation_torques\n"
"\n"
"function NavigatorState getNavigatorState(string navigator)\n"
"function void setNavigatorLEDs(string navigator, uint8 inner_led, uint8 outer_led)\n"
"\n"
"end object\n"
"\n"
);
return out;
}
RR_SHARED_PTR<RobotRaconteur::StructureStub> robot__service__peripheralFactory::FindStructureStub(std::string s)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(s);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (objecttype=="NavigatorState") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<NavigatorState_stub>(GetNode()));
if (objecttype=="SonarPointCloud") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<SonarPointCloud_stub>(GetNode()));
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> robot__service__peripheralFactory::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRStructure> structin)
{
std::string type=structin->RRType();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "robot.service.peripheral") return GetNode()->PackStructure(structin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->PackStructure(structin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::RRObject> robot__service__peripheralFactory::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> mstructin)
{
std::string type=mstructin->GetTypeString();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "robot.service.peripheral") return GetNode()->UnpackStructure(mstructin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->UnpackStructure(mstructin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceStub> robot__service__peripheralFactory::CreateStub(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::ClientContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "robot.service.peripheral") return GetNode()->GetServiceType(servicetype)->CreateStub(type,path,context);
if (objecttype=="BaxterPeripherals") { RR_SHARED_PTR<BaxterPeripherals_stub> o=(RR_MAKE_SHARED<BaxterPeripherals_stub>(path,context)); o->RRInitStub(); return o; }
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceSkel> robot__service__peripheralFactory::CreateSkel(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::RRObject> obj, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "robot.service.peripheral") return GetNode()->GetServiceType(servicetype)->CreateSkel(type,path,obj,context);
if (objecttype=="BaxterPeripherals") {RR_SHARED_PTR<BaxterPeripherals_skel> o=RR_MAKE_SHARED<BaxterPeripherals_skel>(); o->Init(path,obj,context); return o; }
throw RobotRaconteur::ServiceException("Invalid structure skel type.");
return RR_SHARED_PTR<RobotRaconteur::ServiceSkel>();
}
void robot__service__peripheralFactory::DownCastAndThrowException(RobotRaconteur::RobotRaconteurException& rr_exp)
{
std::string rr_type=rr_exp.Error;
if (rr_type.find('.')==std::string::npos)
{
	return;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "robot.service.peripheral") GetNode()->DownCastAndThrowException(rr_exp);
return;
}
RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> robot__service__peripheralFactory::DownCastException(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> rr_exp){
if (!rr_exp) return rr_exp;
std::string rr_type=rr_exp->Error;
if (rr_type.find('.')==std::string::npos)
{
	return rr_exp;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "robot.service.peripheral") return GetNode()->DownCastException(rr_exp);
return rr_exp;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> NavigatorState_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<NavigatorState > s2=RobotRaconteur::rr_cast<NavigatorState >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("ok_button",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(s2->ok_button))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("cancel_button",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(s2->cancel_button))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("show_button",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(s2->show_button))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("scroll_wheel",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(s2->scroll_wheel))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("inner_led",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(s2->inner_led))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("outer_led",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(s2->outer_led))));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("robot.service.peripheral.NavigatorState",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> NavigatorState_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<NavigatorState > ret=RR_MAKE_SHARED<NavigatorState >();
ret->ok_button=RobotRaconteur::RRArrayToScalar<uint8_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"ok_button")->CastData<RobotRaconteur::RRArray<uint8_t > >());
ret->cancel_button=RobotRaconteur::RRArrayToScalar<uint8_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"cancel_button")->CastData<RobotRaconteur::RRArray<uint8_t > >());
ret->show_button=RobotRaconteur::RRArrayToScalar<uint8_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"show_button")->CastData<RobotRaconteur::RRArray<uint8_t > >());
ret->scroll_wheel=RobotRaconteur::RRArrayToScalar<uint8_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"scroll_wheel")->CastData<RobotRaconteur::RRArray<uint8_t > >());
ret->inner_led=RobotRaconteur::RRArrayToScalar<uint8_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"inner_led")->CastData<RobotRaconteur::RRArray<uint8_t > >());
ret->outer_led=RobotRaconteur::RRArrayToScalar<uint8_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"outer_led")->CastData<RobotRaconteur::RRArray<uint8_t > >());
return ret;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> SonarPointCloud_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<SonarPointCloud > s2=RobotRaconteur::rr_cast<SonarPointCloud >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("sensors",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->sensors)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("distances",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->distances)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("points",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->points)));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("robot.service.peripheral.SonarPointCloud",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> SonarPointCloud_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<SonarPointCloud > ret=RR_MAKE_SHARED<SonarPointCloud >();
ret->sensors=RobotRaconteur::MessageElement::FindElement(m->Elements,"sensors")->CastData<RobotRaconteur::RRArray<float > >();
ret->distances=RobotRaconteur::MessageElement::FindElement(m->Elements,"distances")->CastData<RobotRaconteur::RRArray<float > >();
ret->points=RobotRaconteur::MessageElement::FindElement(m->Elements,"points")->CastData<RobotRaconteur::RRArray<float > >();
return ret;
}

BaxterPeripherals_stub::BaxterPeripherals_stub(const std::string &path, RR_SHARED_PTR<RobotRaconteur::ClientContext> c) : RobotRaconteur::ServiceStub(path,c){ }
void BaxterPeripherals_stub::RRInitStub()
{
}

RR_SHARED_PTR<SonarPointCloud > BaxterPeripherals_stub::get_sonar_pointcloud()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"sonar_pointcloud");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::rr_cast<SonarPointCloud >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
void BaxterPeripherals_stub::set_sonar_pointcloud(RR_SHARED_PTR<SonarPointCloud > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"sonar_pointcloud");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(value)))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(req);
}

RR_SHARED_PTR<RobotRaconteur::RRArray<double > > BaxterPeripherals_stub::get_gravity_compensation_torques()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"gravity_compensation_torques");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return me->CastData<RobotRaconteur::RRArray<double > >();
}
void BaxterPeripherals_stub::set_gravity_compensation_torques(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"gravity_compensation_torques");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value)));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(req);
}

void BaxterPeripherals_stub::openGripper(std::string gripper)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"openGripper");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void BaxterPeripherals_stub::closeGripper(std::string gripper)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"closeGripper");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void BaxterPeripherals_stub::calibrateGripper(std::string gripper)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"calibrateGripper");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void BaxterPeripherals_stub::setGripperPosition(std::string gripper, double position)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setGripperPosition");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("position",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(position))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void BaxterPeripherals_stub::setGripperVelocity(std::string gripper, double velocity)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setGripperVelocity");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("velocity",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(velocity))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void BaxterPeripherals_stub::setGripperHoldForce(std::string gripper, double force)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setGripperHoldForce");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("force",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(force))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void BaxterPeripherals_stub::setGripperMoveForce(std::string gripper, double force)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setGripperMoveForce");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("force",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(force))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void BaxterPeripherals_stub::setGripperDeadband(std::string gripper, double deadband)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setGripperDeadband");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("deadband",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(deadband))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

float BaxterPeripherals_stub::getGripperPosition(std::string gripper)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getGripperPosition");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::RRArrayToScalar<float >(rr_me->CastData<RobotRaconteur::RRArray<float > >());
}

float BaxterPeripherals_stub::getGripperForce(std::string gripper)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getGripperForce");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::RRArrayToScalar<float >(rr_me->CastData<RobotRaconteur::RRArray<float > >());
}

float BaxterPeripherals_stub::getRangerValue(std::string arm)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getRangerValue");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("arm",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(arm))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::RRArrayToScalar<float >(rr_me->CastData<RobotRaconteur::RRArray<float > >());
}

float BaxterPeripherals_stub::getAccelerometerValue(std::string arm)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getAccelerometerValue");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("arm",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(arm))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::RRArrayToScalar<float >(rr_me->CastData<RobotRaconteur::RRArray<float > >());
}

void BaxterPeripherals_stub::panHead(double angle)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"panHead");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("angle",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(angle))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

float BaxterPeripherals_stub::getHeadPanAngle()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getHeadPanAngle");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::RRArrayToScalar<float >(rr_me->CastData<RobotRaconteur::RRArray<float > >());
}

void BaxterPeripherals_stub::nodHead()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"nodHead");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void BaxterPeripherals_stub::enableSonar()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"enableSonar");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void BaxterPeripherals_stub::disableSonar()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"disableSonar");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void BaxterPeripherals_stub::suppressBodyAvoidance(std::string limb, uint8_t suppress)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"suppressBodyAvoidance");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("limb",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(limb))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("suppress",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(suppress))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void BaxterPeripherals_stub::suppressCollisionAvoidance(std::string limb, uint8_t suppress)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"suppressCollisionAvoidance");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("limb",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(limb))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("suppress",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(suppress))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void BaxterPeripherals_stub::suppressContactSafety(std::string limb, uint8_t suppress)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"suppressContactSafety");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("limb",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(limb))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("suppress",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(suppress))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void BaxterPeripherals_stub::suppressCuffInteraction(std::string limb, uint8_t suppress)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"suppressCuffInteraction");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("limb",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(limb))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("suppress",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(suppress))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void BaxterPeripherals_stub::suppressGravityCompensation(std::string limb, uint8_t suppress)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"suppressGravityCompensation");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("limb",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(limb))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("suppress",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(suppress))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

RR_SHARED_PTR<NavigatorState > BaxterPeripherals_stub::getNavigatorState(std::string navigator)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getNavigatorState");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("navigator",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(navigator))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<NavigatorState >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

void BaxterPeripherals_stub::setNavigatorLEDs(std::string navigator, uint8_t inner_led, uint8_t outer_led)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setNavigatorLEDs");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("navigator",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(navigator))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("inner_led",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(inner_led))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("outer_led",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(outer_led))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void BaxterPeripherals_stub::DispatchEvent(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void BaxterPeripherals_stub::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void BaxterPeripherals_stub::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry>BaxterPeripherals_stub::CallbackCall(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
std::string ename=rr_m->MemberName;
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_CallbackCallRet, ename);
rr_mr->ServicePath=rr_m->ServicePath;
rr_mr->TransactionID=rr_m->TransactionID;
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

std::string BaxterPeripherals_stub::RRType()
{
return "robot.service.peripheral.BaxterPeripherals";
}
void BaxterPeripherals_stub::RRClose()
{
ServiceStub::RRClose();
}

void BaxterPeripherals_stub::async_get_sonar_pointcloud(boost::function<void (RR_SHARED_PTR<SonarPointCloud >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"sonar_pointcloud");
AsyncProcessTransaction(m,boost::bind(&BaxterPeripherals_stub::rrend_get_sonar_pointcloud, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void BaxterPeripherals_stub::rrend_get_sonar_pointcloud(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<SonarPointCloud > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<SonarPointCloud >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<SonarPointCloud >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<SonarPointCloud > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::rr_cast<SonarPointCloud >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<SonarPointCloud >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<SonarPointCloud >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_set_sonar_pointcloud(RR_SHARED_PTR<SonarPointCloud > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"sonar_pointcloud");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(value)))));
AsyncProcessTransaction(req,boost::bind(&BaxterPeripherals_stub::rrend_set_sonar_pointcloud, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void BaxterPeripherals_stub::rrend_set_sonar_pointcloud(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_get_gravity_compensation_torques(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRArray<double > >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"gravity_compensation_torques");
AsyncProcessTransaction(m,boost::bind(&BaxterPeripherals_stub::rrend_get_gravity_compensation_torques, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void BaxterPeripherals_stub::rrend_get_gravity_compensation_torques(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRArray<double > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<double > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<double > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=me->CastData<RobotRaconteur::RRArray<double > >();
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<double > >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<double > >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_set_gravity_compensation_torques(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"gravity_compensation_torques");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value)));
AsyncProcessTransaction(req,boost::bind(&BaxterPeripherals_stub::rrend_set_gravity_compensation_torques, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void BaxterPeripherals_stub::rrend_set_gravity_compensation_torques(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_openGripper(std::string gripper,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"openGripper");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_openGripper, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_openGripper(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_closeGripper(std::string gripper,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"closeGripper");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_closeGripper, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_closeGripper(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_calibrateGripper(std::string gripper,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"calibrateGripper");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_calibrateGripper, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_calibrateGripper(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_setGripperPosition(std::string gripper, double position,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setGripperPosition");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("position",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(position))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_setGripperPosition, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_setGripperPosition(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_setGripperVelocity(std::string gripper, double velocity,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setGripperVelocity");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("velocity",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(velocity))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_setGripperVelocity, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_setGripperVelocity(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_setGripperHoldForce(std::string gripper, double force,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setGripperHoldForce");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("force",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(force))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_setGripperHoldForce, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_setGripperHoldForce(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_setGripperMoveForce(std::string gripper, double force,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setGripperMoveForce");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("force",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(force))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_setGripperMoveForce, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_setGripperMoveForce(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_setGripperDeadband(std::string gripper, double deadband,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setGripperDeadband");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("deadband",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(deadband))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_setGripperDeadband, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_setGripperDeadband(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_getGripperPosition(std::string gripper,boost::function<void (float, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getGripperPosition");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_getGripperPosition, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_getGripperPosition(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (float ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0.0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0.0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
float rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::RRArrayToScalar<float >(me->CastData<RobotRaconteur::RRArray<float > >());
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(0.0,RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(0.0,RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_getGripperForce(std::string gripper,boost::function<void (float, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getGripperForce");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("gripper",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(gripper))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_getGripperForce, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_getGripperForce(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (float ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0.0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0.0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
float rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::RRArrayToScalar<float >(me->CastData<RobotRaconteur::RRArray<float > >());
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(0.0,RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(0.0,RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_getRangerValue(std::string arm,boost::function<void (float, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getRangerValue");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("arm",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(arm))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_getRangerValue, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_getRangerValue(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (float ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0.0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0.0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
float rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::RRArrayToScalar<float >(me->CastData<RobotRaconteur::RRArray<float > >());
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(0.0,RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(0.0,RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_getAccelerometerValue(std::string arm,boost::function<void (float, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getAccelerometerValue");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("arm",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(arm))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_getAccelerometerValue, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_getAccelerometerValue(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (float ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0.0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0.0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
float rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::RRArrayToScalar<float >(me->CastData<RobotRaconteur::RRArray<float > >());
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(0.0,RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(0.0,RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_panHead(double angle,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"panHead");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("angle",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(angle))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_panHead, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_panHead(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_getHeadPanAngle(boost::function<void (float, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getHeadPanAngle");
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_getHeadPanAngle, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_getHeadPanAngle(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (float ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0.0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0.0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
float rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::RRArrayToScalar<float >(me->CastData<RobotRaconteur::RRArray<float > >());
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(0.0,RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(0.0,RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_nodHead(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"nodHead");
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_nodHead, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_nodHead(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_enableSonar(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"enableSonar");
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_enableSonar, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_enableSonar(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_disableSonar(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"disableSonar");
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_disableSonar, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_disableSonar(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_suppressBodyAvoidance(std::string limb, uint8_t suppress,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"suppressBodyAvoidance");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("limb",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(limb))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("suppress",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(suppress))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_suppressBodyAvoidance, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_suppressBodyAvoidance(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_suppressCollisionAvoidance(std::string limb, uint8_t suppress,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"suppressCollisionAvoidance");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("limb",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(limb))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("suppress",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(suppress))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_suppressCollisionAvoidance, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_suppressCollisionAvoidance(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_suppressContactSafety(std::string limb, uint8_t suppress,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"suppressContactSafety");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("limb",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(limb))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("suppress",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(suppress))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_suppressContactSafety, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_suppressContactSafety(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_suppressCuffInteraction(std::string limb, uint8_t suppress,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"suppressCuffInteraction");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("limb",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(limb))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("suppress",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(suppress))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_suppressCuffInteraction, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_suppressCuffInteraction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_suppressGravityCompensation(std::string limb, uint8_t suppress,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"suppressGravityCompensation");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("limb",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(limb))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("suppress",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(suppress))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_suppressGravityCompensation, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_suppressGravityCompensation(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_getNavigatorState(std::string navigator,boost::function<void (RR_SHARED_PTR<NavigatorState >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getNavigatorState");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("navigator",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(navigator))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_getNavigatorState, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_getNavigatorState(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<NavigatorState > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<NavigatorState >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<NavigatorState >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<NavigatorState > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<NavigatorState >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<NavigatorState >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<NavigatorState >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void BaxterPeripherals_stub::async_setNavigatorLEDs(std::string navigator, uint8_t inner_led, uint8_t outer_led,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setNavigatorLEDs");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("navigator",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(navigator))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("inner_led",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(inner_led))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("outer_led",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(outer_led))));
AsyncProcessTransaction(rr_req,boost::bind(&BaxterPeripherals_stub::rrend_setNavigatorLEDs, RobotRaconteur::rr_cast<BaxterPeripherals_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void BaxterPeripherals_stub::rrend_setNavigatorLEDs(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}

void BaxterPeripherals_skel::Init(const std::string& path, RR_SHARED_PTR<RobotRaconteur::RRObject> object, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
uncastobj=object;
rr_InitPipeServersRun=false;
rr_InitWireServersRun=false;
ServiceSkel::Init(path,object,context);
}
RR_SHARED_PTR<robot::service::peripheral::BaxterPeripherals > BaxterPeripherals_skel::get_obj()
{
return RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals >(uncastobj);
}
RR_SHARED_PTR<robot::service::peripheral::async_BaxterPeripherals > BaxterPeripherals_skel::get_asyncobj()
{
return RR_DYNAMIC_POINTER_CAST<robot::service::peripheral::async_BaxterPeripherals >(uncastobj);
}
void BaxterPeripherals_skel::ReleaseCastObject() 
{
}
std::string BaxterPeripherals_skel::GetObjectType()
{
return "robot.service.peripheral.BaxterPeripherals";
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> BaxterPeripherals_skel::CallGetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetRes,m->MemberName);
RR_SHARED_PTR<robot::service::peripheral::async_BaxterPeripherals > async_obj=get_asyncobj();
if (m->MemberName == "sonar_pointcloud")
{
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_get_sonar_pointcloud(boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_get_sonar_pointcloud,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<SonarPointCloud > value=get_obj()->get_sonar_pointcloud();
mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(value)))));
return mr;
}
}
if (m->MemberName == "gravity_compensation_torques")
{
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_get_gravity_compensation_torques(boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_get_gravity_compensation_torques,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value=get_obj()->get_gravity_compensation_torques();
mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value)));
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> BaxterPeripherals_skel::CallSetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetRes,m->MemberName);
RR_SHARED_PTR<robot::service::peripheral::async_BaxterPeripherals > async_obj=get_asyncobj();
if (m->MemberName == "sonar_pointcloud")
{
RR_SHARED_PTR<SonarPointCloud > value=RobotRaconteur::rr_cast<SonarPointCloud >(RRGetNode()->UnpackStructure(m->FindElement("value")->CastData<RobotRaconteur::MessageElementStructure>()));
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_set_sonar_pointcloud(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_sonar_pointcloud(value);
return mr;
}
}
if (m->MemberName == "gravity_compensation_torques")
{
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value=m->FindElement("value")->CastData<RobotRaconteur::RRArray<double > >();
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_set_gravity_compensation_torques(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_gravity_compensation_torques(value);
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void BaxterPeripherals_skel::rr_get_sonar_pointcloud(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel,RR_SHARED_PTR<SonarPointCloud > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(value))));
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_get_gravity_compensation_torques(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel,RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value));
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> BaxterPeripherals_skel::CallFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallRes,rr_m->MemberName);
RR_SHARED_PTR<robot::service::peripheral::async_BaxterPeripherals > async_obj=get_asyncobj();
if (rr_m->MemberName == "openGripper")
{
std::string gripper =RobotRaconteur::RRArrayToString(rr_m->FindElement("gripper")->CastData<RobotRaconteur::RRArray<char> >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_openGripper(gripper, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_openGripper,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->openGripper(gripper);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "closeGripper")
{
std::string gripper =RobotRaconteur::RRArrayToString(rr_m->FindElement("gripper")->CastData<RobotRaconteur::RRArray<char> >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_closeGripper(gripper, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_closeGripper,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->closeGripper(gripper);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "calibrateGripper")
{
std::string gripper =RobotRaconteur::RRArrayToString(rr_m->FindElement("gripper")->CastData<RobotRaconteur::RRArray<char> >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_calibrateGripper(gripper, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_calibrateGripper,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->calibrateGripper(gripper);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "setGripperPosition")
{
std::string gripper =RobotRaconteur::RRArrayToString(rr_m->FindElement("gripper")->CastData<RobotRaconteur::RRArray<char> >());
double position =RobotRaconteur::RRArrayToScalar<double >(rr_m->FindElement("position")->CastData<RobotRaconteur::RRArray<double > >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_setGripperPosition(gripper, position, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_setGripperPosition,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->setGripperPosition(gripper, position);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "setGripperVelocity")
{
std::string gripper =RobotRaconteur::RRArrayToString(rr_m->FindElement("gripper")->CastData<RobotRaconteur::RRArray<char> >());
double velocity =RobotRaconteur::RRArrayToScalar<double >(rr_m->FindElement("velocity")->CastData<RobotRaconteur::RRArray<double > >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_setGripperVelocity(gripper, velocity, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_setGripperVelocity,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->setGripperVelocity(gripper, velocity);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "setGripperHoldForce")
{
std::string gripper =RobotRaconteur::RRArrayToString(rr_m->FindElement("gripper")->CastData<RobotRaconteur::RRArray<char> >());
double force =RobotRaconteur::RRArrayToScalar<double >(rr_m->FindElement("force")->CastData<RobotRaconteur::RRArray<double > >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_setGripperHoldForce(gripper, force, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_setGripperHoldForce,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->setGripperHoldForce(gripper, force);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "setGripperMoveForce")
{
std::string gripper =RobotRaconteur::RRArrayToString(rr_m->FindElement("gripper")->CastData<RobotRaconteur::RRArray<char> >());
double force =RobotRaconteur::RRArrayToScalar<double >(rr_m->FindElement("force")->CastData<RobotRaconteur::RRArray<double > >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_setGripperMoveForce(gripper, force, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_setGripperMoveForce,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->setGripperMoveForce(gripper, force);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "setGripperDeadband")
{
std::string gripper =RobotRaconteur::RRArrayToString(rr_m->FindElement("gripper")->CastData<RobotRaconteur::RRArray<char> >());
double deadband =RobotRaconteur::RRArrayToScalar<double >(rr_m->FindElement("deadband")->CastData<RobotRaconteur::RRArray<double > >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_setGripperDeadband(gripper, deadband, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_setGripperDeadband,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->setGripperDeadband(gripper, deadband);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "getGripperPosition")
{
std::string gripper =RobotRaconteur::RRArrayToString(rr_m->FindElement("gripper")->CastData<RobotRaconteur::RRArray<char> >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_getGripperPosition(gripper, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_getGripperPosition, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
float rr_return=get_obj()->getGripperPosition(gripper);
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<float >(rr_return))));
return rr_mr;
}
}
if (rr_m->MemberName == "getGripperForce")
{
std::string gripper =RobotRaconteur::RRArrayToString(rr_m->FindElement("gripper")->CastData<RobotRaconteur::RRArray<char> >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_getGripperForce(gripper, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_getGripperForce, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
float rr_return=get_obj()->getGripperForce(gripper);
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<float >(rr_return))));
return rr_mr;
}
}
if (rr_m->MemberName == "getRangerValue")
{
std::string arm =RobotRaconteur::RRArrayToString(rr_m->FindElement("arm")->CastData<RobotRaconteur::RRArray<char> >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_getRangerValue(arm, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_getRangerValue, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
float rr_return=get_obj()->getRangerValue(arm);
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<float >(rr_return))));
return rr_mr;
}
}
if (rr_m->MemberName == "getAccelerometerValue")
{
std::string arm =RobotRaconteur::RRArrayToString(rr_m->FindElement("arm")->CastData<RobotRaconteur::RRArray<char> >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_getAccelerometerValue(arm, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_getAccelerometerValue, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
float rr_return=get_obj()->getAccelerometerValue(arm);
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<float >(rr_return))));
return rr_mr;
}
}
if (rr_m->MemberName == "panHead")
{
double angle =RobotRaconteur::RRArrayToScalar<double >(rr_m->FindElement("angle")->CastData<RobotRaconteur::RRArray<double > >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_panHead(angle, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_panHead,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->panHead(angle);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "getHeadPanAngle")
{
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_getHeadPanAngle(boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_getHeadPanAngle, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
float rr_return=get_obj()->getHeadPanAngle();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<float >(rr_return))));
return rr_mr;
}
}
if (rr_m->MemberName == "nodHead")
{
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_nodHead(boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_nodHead,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->nodHead();
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "enableSonar")
{
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_enableSonar(boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_enableSonar,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->enableSonar();
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "disableSonar")
{
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_disableSonar(boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_disableSonar,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->disableSonar();
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "suppressBodyAvoidance")
{
std::string limb =RobotRaconteur::RRArrayToString(rr_m->FindElement("limb")->CastData<RobotRaconteur::RRArray<char> >());
uint8_t suppress =RobotRaconteur::RRArrayToScalar<uint8_t >(rr_m->FindElement("suppress")->CastData<RobotRaconteur::RRArray<uint8_t > >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_suppressBodyAvoidance(limb, suppress, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_suppressBodyAvoidance,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->suppressBodyAvoidance(limb, suppress);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "suppressCollisionAvoidance")
{
std::string limb =RobotRaconteur::RRArrayToString(rr_m->FindElement("limb")->CastData<RobotRaconteur::RRArray<char> >());
uint8_t suppress =RobotRaconteur::RRArrayToScalar<uint8_t >(rr_m->FindElement("suppress")->CastData<RobotRaconteur::RRArray<uint8_t > >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_suppressCollisionAvoidance(limb, suppress, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_suppressCollisionAvoidance,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->suppressCollisionAvoidance(limb, suppress);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "suppressContactSafety")
{
std::string limb =RobotRaconteur::RRArrayToString(rr_m->FindElement("limb")->CastData<RobotRaconteur::RRArray<char> >());
uint8_t suppress =RobotRaconteur::RRArrayToScalar<uint8_t >(rr_m->FindElement("suppress")->CastData<RobotRaconteur::RRArray<uint8_t > >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_suppressContactSafety(limb, suppress, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_suppressContactSafety,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->suppressContactSafety(limb, suppress);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "suppressCuffInteraction")
{
std::string limb =RobotRaconteur::RRArrayToString(rr_m->FindElement("limb")->CastData<RobotRaconteur::RRArray<char> >());
uint8_t suppress =RobotRaconteur::RRArrayToScalar<uint8_t >(rr_m->FindElement("suppress")->CastData<RobotRaconteur::RRArray<uint8_t > >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_suppressCuffInteraction(limb, suppress, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_suppressCuffInteraction,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->suppressCuffInteraction(limb, suppress);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "suppressGravityCompensation")
{
std::string limb =RobotRaconteur::RRArrayToString(rr_m->FindElement("limb")->CastData<RobotRaconteur::RRArray<char> >());
uint8_t suppress =RobotRaconteur::RRArrayToScalar<uint8_t >(rr_m->FindElement("suppress")->CastData<RobotRaconteur::RRArray<uint8_t > >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_suppressGravityCompensation(limb, suppress, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_suppressGravityCompensation,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->suppressGravityCompensation(limb, suppress);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "getNavigatorState")
{
std::string navigator =RobotRaconteur::RRArrayToString(rr_m->FindElement("navigator")->CastData<RobotRaconteur::RRArray<char> >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_getNavigatorState(navigator, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_getNavigatorState, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<NavigatorState > rr_return=get_obj()->getNavigatorState(navigator);
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "setNavigatorLEDs")
{
std::string navigator =RobotRaconteur::RRArrayToString(rr_m->FindElement("navigator")->CastData<RobotRaconteur::RRArray<char> >());
uint8_t inner_led =RobotRaconteur::RRArrayToScalar<uint8_t >(rr_m->FindElement("inner_led")->CastData<RobotRaconteur::RRArray<uint8_t > >());
uint8_t outer_led =RobotRaconteur::RRArrayToScalar<uint8_t >(rr_m->FindElement("outer_led")->CastData<RobotRaconteur::RRArray<uint8_t > >());
if (async_obj)
{
RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> rr_wp=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals_skel>(shared_from_this());
async_obj->async_setNavigatorLEDs(navigator, inner_led, outer_led, boost::bind(&robot::service::peripheral::BaxterPeripherals_skel::rr_setNavigatorLEDs,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->setNavigatorLEDs(navigator, inner_led, outer_led);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void BaxterPeripherals_skel::rr_openGripper(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_closeGripper(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_calibrateGripper(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_setGripperPosition(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_setGripperVelocity(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_setGripperHoldForce(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_setGripperMoveForce(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_setGripperDeadband(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_getGripperPosition(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, float ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<float >(ret)));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_getGripperForce(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, float ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<float >(ret)));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_getRangerValue(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, float ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<float >(ret)));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_getAccelerometerValue(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, float ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<float >(ret)));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_panHead(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_getHeadPanAngle(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, float ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<float >(ret)));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_nodHead(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_enableSonar(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_disableSonar(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_suppressBodyAvoidance(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_suppressCollisionAvoidance(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_suppressContactSafety(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_suppressCuffInteraction(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_suppressGravityCompensation(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_getNavigatorState(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<NavigatorState > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::rr_setNavigatorLEDs(RR_WEAK_PTR<robot::service::peripheral::BaxterPeripherals_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void BaxterPeripherals_skel::RegisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RR_SHARED_PTR<robot::service::peripheral::BaxterPeripherals > obj=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals >(rrobj1);
RobotRaconteur::ServiceSkel::RegisterEvents(rrobj1);
}

void BaxterPeripherals_skel::UnregisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RobotRaconteur::ServiceSkel::UnregisterEvents(rrobj1);
}

RR_SHARED_PTR<RobotRaconteur::RRObject> BaxterPeripherals_skel::GetSubObj(const std::string &name, const std::string &ind)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void BaxterPeripherals_skel::InitPipeServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitPipeServersRun) return;
rr_InitPipeServersRun=true;
RR_SHARED_PTR<robot::service::peripheral::BaxterPeripherals > obj=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals >(rrobj1);
}

void BaxterPeripherals_skel::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> BaxterPeripherals_skel::CallPipeFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void BaxterPeripherals_skel::InitWireServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitWireServersRun) return;
rr_InitWireServersRun=true;
RR_SHARED_PTR<robot::service::peripheral::BaxterPeripherals > obj=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals >(rrobj1);
}

void BaxterPeripherals_skel::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> BaxterPeripherals_skel::CallWireFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void BaxterPeripherals_skel::InitCallbackServers(RR_SHARED_PTR<RobotRaconteur::RRObject> o)
{
RR_SHARED_PTR<robot::service::peripheral::BaxterPeripherals > obj=RobotRaconteur::rr_cast<robot::service::peripheral::BaxterPeripherals >(o);
}
RR_SHARED_PTR<void> BaxterPeripherals_skel::GetCallbackFunction(uint32_t endpoint, const std::string& membername)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> BaxterPeripherals_skel::CallMemoryFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::Endpoint> e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
}
}
}

