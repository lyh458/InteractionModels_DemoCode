//This file is automatically generated. DO NOT EDIT!

#include <RobotRaconteur.h>
#include <boost/signals2.hpp>
#pragma once

namespace robot
{
namespace service
{
namespace camera
{

class BaxterImage;
class CameraIntrinsics;
class ImageHeader;
class BaxterCamera;

class BaxterImage : public RobotRaconteur::RRStructure {
public:
int32_t width;
int32_t height;
int32_t step;
RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > data;

virtual std::string RRType() {return "robot.service.camera.BaxterImage";  }
};

class CameraIntrinsics : public RobotRaconteur::RRStructure {
public:
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > K;
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > D;

virtual std::string RRType() {return "robot.service.camera.CameraIntrinsics";  }
};

class ImageHeader : public RobotRaconteur::RRStructure {
public:
int32_t width;
int32_t height;
int32_t step;

virtual std::string RRType() {return "robot.service.camera.ImageHeader";  }
};

class BaxterCamera : public virtual RobotRaconteur::RRObject
{
public:
virtual uint8_t get_camera_open()=0;
virtual void set_camera_open(uint8_t value)=0;

virtual void openCamera()=0;

virtual void closeCamera()=0;

virtual void setExposure(int16_t exposure)=0;

virtual void setGain(int16_t gain)=0;

virtual void setWhiteBalance(int16_t red, int16_t green, int16_t blue)=0;

virtual void setFPS(double fps)=0;

virtual RR_SHARED_PTR<BaxterImage > getCurrentImage()=0;

virtual RR_SHARED_PTR<ImageHeader > getImageHeader()=0;

virtual RR_SHARED_PTR<CameraIntrinsics > getCameraIntrinsics()=0;

virtual RR_SHARED_PTR<RobotRaconteur::Pipe<RR_SHARED_PTR<BaxterImage > > > get_ImageStream()=0;
virtual void set_ImageStream(RR_SHARED_PTR<RobotRaconteur::Pipe<RR_SHARED_PTR<BaxterImage > > > value)=0;

virtual std::string RRType() {return "robot.service.camera.BaxterCamera";  }
};

}
}
}

